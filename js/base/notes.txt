================================================================================
Gizmos

Nearly all game state is managed through a base object called a "Gizmo".  One important concept is that Gizmo's allow for nesting state, so that a top-level
object can have dependent children, and those dependent children will be updated and rendered when the top-level object is updated and rendered.

This will come into play when the code entry points for each basic object type is described below.

================================================================================
Code Entry Points

Top level code entry is through the Game object (game.js) and is called from the main loop.  Each iteration of the main loop calls two entry points:

x  game.update(ctx) - given an update context, which includes a deltaTime variable, update game state.
x  game.render() - render the current game state.

Each of these iterates through the set of top level objects the game tracks and performs the update for each object (if applicable) and the render 
for each top-level object (if applicable).

How this all breaks down is dependent on the object assignment within the game.  This will be described based on object type below.

----------------------------------------
StateMgr - Top level state manager, controls current State and manages any non-active queued/stored state.

Update/Render to top-level State object is called.

x game.update(ctx)
    -> game.objects(*).update(ctx)
        -> StateMgr.update(ctx)

x game.render()
    -> game.objects(*).render()
        -> StateMgr.render()

----------------------------------------
StateMgr - Top level state manager, controls current State and manages any non-active queued/stored state.

----------------------------------------
UxView

Update/Render tied to ViewMgr instance.  ViewMgr assigned to State.

----------------------------------------
UxCtrl

Update tied to CtrlMgr instance.  CtrlMgr assigned to State.

----------------------------------------
Model

Update tied to entity list of State instance.
